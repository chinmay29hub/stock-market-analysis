# -*- coding: utf-8 -*-
"""rnn stock price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fNegR_0k2yyQBtH9bagXqSM5ph9Bi2Mq

# Recurrent Neural Network
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""### Importing the training set"""

dataset_train=pd.read_csv('Google_Stock_Price_Train.csv')
trainig_set=dataset_train.iloc[:,1:2].values  #creating a numarray that contains the open price of the stock

"""### Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler(feature_range=(0,1))  #all stock prices will be between 0 and 1
training_set_scaled=sc.fit_transform(trainig_set)

"""### Creating a data structure with 60 timesteps and 1 output

Timesteps:Data structure specifying what the rnn needs to remeber.
"""

X_train=[]
y_train=[]
for i in range(60,1258): #we will select the first 60 values to predict the first value and so on
  X_train.append(training_set_scaled[i-60:i, 0])  #will put first 60 value in x
  y_train.append(training_set_scaled[i,0])#will put the value we will predict
X_train,y_train=np.array(X_train),np.array(y_train)
#improvement added
X_train_last_column = X_train[:,-1]
X_train_min = X_train.min(axis=1)
X_train_max = X_train.max(axis=1)
X_diff = X_train_max-X_train_min
X_train_divided = (X_train-X_train_min[:, np.newaxis] )/X_diff[:, np.newaxis]
y_train_divided = (y_train-X_train_min )/X_diff

print(X_train)

"""### Reshaping"""

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

print(X_train)

"""## Part 2 - Building and Training the RNN

### Importing the Keras libraries and packages
"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

"""### Initialising the RNN"""

regressor=Sequential()

"""### Adding the first LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

"""Dropout momentarily (in a batch of input data) switches off some neurons in a layer so that they do not contribute any information or learn any information during those updates, and the onus falls on other active neurons to learn harder and reduce the error.

### Adding a second LSTM layer and some Dropout regularisation
"""

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

"""### Adding a third LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

"""### Adding a fourth LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50, return_sequences = False)) #false as it the last lstm layer
regressor.add(Dropout(0.2))

"""### Adding the output layer"""

regressor.add(Dense(units=1))

"""### Compiling the RNN"""

regressor.compile(optimizer='adam' ,loss='mean_squared_error')

"""### Fitting the RNN to the Training set"""

regressor.fit(X_train,y_train,epochs=100,batch_size=32)

"""## Part 3 - Making the predictions and visualising the results

### Getting the real stock price of 2017
"""

dataset_test = pd.read_csv('Google_Stock_Price_Test.csv')
real_stock_price = dataset_test.iloc[:, 1:2].values

"""### Getting the predicted stock price of 2017"""

dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, 80):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

"""### Visualising the results"""

plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')

plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()

plt.plot(abs(real_stock_price- predicted_stock_price), color = 'red', label = 'Difference')
plt.xlabel('Time')
plt.ylabel('difference')
plt.legend()
plt.show()

regressor.save('rnn_old.h5')
