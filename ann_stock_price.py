# -*- coding: utf-8 -*-
"""ann stock price

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HDHHGW0i41LmsHQLAKwXZm9UM1nkG9fC

# Artificial Neural Network
"""



"""### Importing the libraries"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset_train=pd.read_csv('Google_Stock_Price_Train.csv')
dataset_test=pd.read_csv('Google_Stock_Price_Test.csv')
X_train=dataset_train.iloc[:-1,1:2].values  #creating a numarray that contains the open price of the stock
y_train=dataset_train.iloc[1:,1:2].values
X_test=dataset_test.iloc[:-1,1:2].values  #creating a numarray that contains the open price of the stock
y_test=dataset_test.iloc[1:,1:2].values

"""we are trying to predict the opening price using the previous days opening stock price

"""

# print(y_test)

# print(X_test)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()#used to create a sequnece of layers

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""### Training the ANN model on the Training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""Download model as pickle file

"""



"""### Predicting the results of the Test set"""

y_pred = ann.predict(X_test)
# np.set_printoptions(precision=2)#set the decimal place to 2
# print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))#reshaping horizontal to vertical vector
# print(y_pred)
# print(y_test)
# print(y_pred-y_test)

from sklearn.metrics import confusion_matrix, accuracy_score
plt.plot(y_test, color = 'red', label = 'Real Google Stock Price')
plt.plot(y_pred, color = 'blue', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()

plt.plot(abs(y_pred-y_test), color = 'red', label = 'Difference')
plt.xlabel('Time')
plt.ylabel('difference')
plt.legend()
plt.show()

# dataset_test_1=pd.read_csv('WIPRO.NS.csv')
# X_test_1=dataset_test_1.iloc[:-1,1:2].values  #creating a numarray that contains the open price of the stock
# y_test_1=dataset_test_1.iloc[1:,1:2].values
# y_pred_1 = ann.predict(X_test_1)
# # np.set_printoptions(precision=2)#set the decimal place to 2
# # print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))#reshaping horizontal to vertical vector

# plt.plot(y_test_1[:15], color = 'red', label = 'Real Wipro Stock Price')
# plt.plot(y_pred_1[:15], color = 'blue', label = 'Predicted Wipro Stock Price')
# plt.title('Google Stock Price Prediction')
# plt.xlabel('Time')
# plt.ylabel('Google Stock Price')
# plt.legend()
# plt.show()

# totalsum=abs(y_test-y_pred)
# totalsum=np.sum(totalsum)/np.sum(y_test)
# print(totalsum)
ann.save('ann.h5')